{"name":"es6ify","tagline":"browserify v2 transform to compile JavaScript.next (ES6) to JavaScript.current (ES5) on the fly.","body":"# es6ify [![build status](https://secure.travis-ci.org/thlorenz/es6ify.png)](http://travis-ci.org/thlorenz/es6ify)\r\n\r\n[browserify](https://github.com/substack/node-browserify) v2 transform to compile JavaScript.next (ES6) to\r\nJavaScript.current (ES5) on the fly\r\n\r\n## Try it!\r\n\r\nOpen your dev tools and look inside the Sources tab and/or the Console to see the results.\r\n\r\nMake sure to use a browser that supports source maps and make sure to enable them in the settings.\r\n\r\nMost examples are derived from the [traceur language feature](https://code.google.com/p/traceur-compiler/wiki/LanguageFeatures).\r\n\r\n## What You Get\r\n\r\n![generators](https://github.com/thlorenz/es6ify/raw/master/assets/generators-shot.png)\r\n\r\n## How the bundle was built\r\n\r\n```js\r\nbrowserify()\r\n  .add(es6ify.runtime)\r\n  .transform(es6ify)\r\n  .require(require.resolve('./src/main.js'), { entry: true })\r\n  .bundle({ debug: true })\r\n  .pipe(fs.createWriteStream(bundlePath));\r\n```\r\n\r\nFind the full version of this example [here](https://github.com/thlorenz/es6ify/blob/master/example/build.js).\r\n\r\n## Installation\r\n\r\n    npm install es6ify\r\n\r\n\r\n**Table of Contents**  *generated with [DocToc](http://doctoc.herokuapp.com/)*\r\n\r\n- [API](#api)\r\n  - [es6ify](#es6ify)\r\n  - [es6ify.configure(filePattern : Regex, stderr : Stream)](#es6ifyconfigurefilepattern-:-regex-stderr-:-stream)\r\n  - [es6ify.runtime](#es6ifyruntime)\r\n- [Caching](#caching)\r\n- [Source Maps](#source-maps)\r\n- [Supported ES6 features](#supported-es6-features)\r\n  - [arrayComprehension](#arraycomprehension)\r\n  - [arrowFunctions](#arrowfunctions)\r\n  - [classes](#classes)\r\n  - [defaultParameters](#defaultparameters)\r\n  - [destructuring](#destructuring)\r\n  - [forOf](#forof)\r\n  - [propertyMethods](#propertymethods)\r\n  - [propertyNameShorthand](#propertynameshorthand)\r\n  - [templateLiterals](#templateliterals)\r\n  - [restParameters](#restparameters)\r\n  - [spread](#spread)\r\n  - [generatorComprehension](#generatorcomprehension)\r\n  - [generators](#generators)\r\n  - [blockBinding](#blockbinding)\r\n- [Unsupported ES6 Features](#unsupported-es6-features)\r\n  - [modules](#modules)\r\n\r\n## API\r\n\r\n### es6ify\r\n\r\nReturns a transform with default file pattern and standard error stream.\r\n\r\n```js\r\nbrowserify()\r\n  .add(require('es6ify').runtime)\r\n  .transform(require('es6ify'))\r\n  .require(require.resolve('./src/main.js'), { entry: true })\r\n  .bundle({ debug: true })\r\n  .pipe(fs.createWriteStream(bundlePath));\r\n```\r\n\r\n### es6ify.configure(filePattern : Regex, stderr : Stream)\r\n\r\nReturns a es6 transform with custom file pattern and standard error stream.\r\n\r\nThe default file pattern includes all JavaScript files, but you may override it in order to only transform files coming\r\nfrom a certain directory, with a specific file name and/or extension, etc.\r\n\r\nBy configuring the regex to exclude ES5 files, you can optimize the performance of the transform. However transforming\r\nES5 JavaScript will work since it is a subset of ES6.\r\n\r\n```js\r\nbrowserify()\r\n  .add(require('es6ify').runtime)\r\n   // compile all .js files except the ones coming from node_modules\r\n  .transform(require('es6ify').configure(/^(?!.*node_modules)+.+\\.js$/))\r\n  .require(require.resolve('./src/main.js'), { entry: true })\r\n  .bundle({ debug: true })\r\n  .pipe(fs.createWriteStream(bundlePath));\r\n```\r\n\r\n### es6ify.runtime\r\n\r\nReturns runtime necessary to support ES6 features and therefore needs to be added to the bundle like in the example\r\nabove.\r\n\r\n## Caching\r\n\r\nWhen es6ify is run on a development server to help generate the browserify bundle on the fly, it makes sense to only\r\nrecompile ES6 files that changed. Therefore es6ify caches previously compiled files and just pulls them from there if no\r\nchanges were made to the file.\r\n\r\n## Source Maps\r\n\r\nes6ify instructs the traceur transpiler to generate source maps. It then inlines all original sources and adds the\r\nresulting source map `base64` encoded to the bottom of the transformed content. This allows debugging the original ES6\r\nsource when using the `debug` flag with browserify.\r\n\r\nIf the `debug` flag is not set, these source maps will be removed by browserify and thus will not be contained inside\r\nyour production bundle.\r\n\r\n## Supported ES6 features\r\n\r\n### arrayComprehension\r\n\r\n### arrowFunctions\r\n\r\n[example](https://github.com/thlorenz/es6ify/blob/master/example/src/features/arrow-functions.js)\r\n\r\n### classes\r\n\r\n[example](https://github.com/thlorenz/es6ify/blob/master/example/src/make-monster.js)\r\n\r\n### defaultParameters\r\n\r\n[example](https://github.com/thlorenz/es6ify/blob/master/example/src/features/default-parameters.js)\r\n\r\n### destructuring\r\n\r\n[example](https://github.com/thlorenz/es6ify/blob/master/example/src/features/destructuring.js)\r\n\r\n### forOf\r\n\r\n[example](https://github.com/thlorenz/es6ify/blob/master/example/src/features/iterators.js)\r\n\r\n### propertyMethods\r\n\r\n### propertyNameShorthand\r\n\r\n### templateLiterals\r\n\r\n### restParameters\r\n\r\n[example](https://github.com/thlorenz/es6ify/blob/master/example/src/features/rest-parameters.js)\r\n\r\n### spread\r\n\r\n[example](https://github.com/thlorenz/es6ify/blob/master/example/src/features/spread-operator.js)\r\n\r\n### generatorComprehension\r\n\r\n### generators\r\n\r\n[example](https://github.com/thlorenz/es6ify/blob/master/example/src/features/generators.js)\r\n\r\n### blockBinding\r\n\r\nThe block binding `let` is implemented in ES5 via `try/catch` blocks which may affect performance.\r\n\r\n## Unsupported ES6 Features\r\n\r\n### modules \r\n\r\nI recommend to use `require` instead since that integrates better with browserify. \r\n\r\nIf you want to use ES6 modules, you need to compile all files that use them into one file since\r\ninlining them is the only way to make this work in ES5. You can then `browserify.add` that file and therefore wouldn't\r\nneed es6ify.\r\n\r\nCompiling a single file makes caching impossible and will lead to longer bundle times when used on the development\r\nserver to bundle on the fly.","google":"UA-39542184-1","note":"Don't delete this file! It's used internally to help with page regeneration."}